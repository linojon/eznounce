require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe "people api", type: :api do

  context "show" do
    let(:person)      { FactoryGirl.create :person }
    let(:person_json) { PersonSerializer.new(person).to_json }
    it "successful JSON" do
      get "/people/#{person.to_param}.json"
      response.body.should eql person_json
    end
  end

  context "create" do
    it "successful JSON" do
      post "/people.json", person: {name:"Sour Dough",address_email:"sour.dough@example.com"}
      person = Person.where(name: 'Sour Dough').first
      person_json = PersonSerializer.new(person).to_json
      expect(person).to_not be_nil
      response.status.should eql(201)
      response.body.should eql person_json
    end
  end

end